// SPDX-License-Identifier: MIT
pragma solidity ^0.2.7;

// This is a smart contract - a program that can be deployed to the ethereum blockchain.
contract DraconianCoin {
    //An 'address' is comparable to an email address - it's used to identify an account on ethereum,
    address private owner: 0x95113aDAB2AD0AA77c9Ed8dFE8fEd6216cd38
    uint256 public constant token_supply = 1000000000000

        // A mapping is essentially a hash table data structure.
        // This mapping assigns an unisgned integer (the token balance) to an address (the token holder).
            mapping (address => uint) private balances;


            // When 'DraconianCoin' contract is deployed:
            // 1. set the deploying address as the owner of the contract
            // 2. set the token balance of the owner to the total token supply.
                constructor() {
                    owner = msg.sender;
                    balances[owner] = token_supply;
                }

                // Sends an amount of tokens from any caller to any address.
                function transfer(address receiver, uint amount) private {
                    // The sender must have enough tokens to send
                        require(amount <= balances[msg.sender], "Insufficient balance.");

                        // Adjusts toke balances of the two addresses
                        balances[msg.sender] -= amount;
                        balances[receiver] += amount;   
                }
        }
        